<?php

/**
 * Implements hook_library_info().
 */
function tour_library_info() {
  $libraries['shepherd'] = array(
    'title' => 'Shepherd',
    'website' => 'https://github.com/shipshapecode/shepherd',
    'version' => '1.2',
    'js' => array(
      backdrop_get_path('module', 'tour') . '/shepherd/shepherd.min.js' => array(),
    ),
    'css' => array(
      backdrop_get_path('module', 'tour') . '/shepherd/shepherd.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_init().
 */
function tour_init() {
  $active_tours = tour_get_path_tours();
  if (isset($_GET['tour-jump']) && $tour_jump = tour_load($_GET['tour-jump'])) {
    $active_tours += array($tour_jump['name'] => $tour_jump);
  }
  tour_add_tours($active_tours);
}


/**
 *  Checks if any tour is active on a given path.
 */
function tour_get_path_tours() {
  $tours = tour_load_all();
  $active_tours = array();
  foreach($tours as $name => $tour) {
    if($tour['enabled']) {
      foreach($tour['paths'] as $path) {
        if ($path == current_path() || $path == request_path() || ($path == '<front>' && request_path() == '')) {
          $active_tours[$name] = $tour;
        }
      }
    }
  }

  return $active_tours;
}


/**
 *  Adds necessary javascript to the page to run a tour.
 */
function tour_add_tours($active_tours) {
  $js_settings = array();
  $auto_start = FALSE;

  foreach ($active_tours as $tour_id => $tour) {
    // Allow other modules to alter the tour.
    backdrop_alter('tour_tour', $tour);

    $items = [];
    if (!empty($tour['auto_start'])) {
      $auto_start = TRUE;
    }

    $total_steps = 0;
    foreach ($tour['steps'] as $tip) {
      $total_steps = count($tour['steps']);
    }
    $index = 0;
    foreach ($tour['steps'] as $key => $tip) {
      
      $classes = [
        'tip-' . $tip['id'],
      ];

      $selector = $tip['selector'];
      $location = 'top'; // $tip['selector'];

      if (isset($tip['text']['format'])) {
        $tip_text = $tip['text']['value'];
      }
      else {
        $tip_text =  $tip['text'];
      }

      $output = [
        'text' => filter_xss($tip_text),
        'title' => filter_xss($tip['title']),
      ];


      if ($output) {
        $items[] = [
          'id' => $tip['id'],
          'selector' => $selector,
          'module' => 'tour',
          'jump' => !empty($tip['jump']) ? $tip['jump'] : '',
          'type' => 'tour',
          'counter' => t('@tour_item of @total', [
            '@tour_item' => $index + 1,
            '@total' => $total_steps,
          ]),
          'attachTo' => [
             'element' => $selector,
             'on' => $location,
          ],
          // Shepherd expects classes to be provided as a string.
          'classes' => implode(' ', $classes),
        ] + $output;
      }
      $index++;
    }

    // If there is at least one tour item, build the tour.
    if ($items) {
      end($items);
      $key = key($items);
      $items[$key]['cancelText'] = t('End tour');
    }

    $build = array();

    // If at least one tour was built, attach tips and the tour library.
    if ($items) {
      $build['tourShepherdConfig'] = [
        'defaultStepOptions' => [
          'classes' => 'backdrop-tour',
          'cancelIcon' => [
            'enabled' => TRUE,
            'label' => t('Close'),
          ],
          'modalOverlayOpeningPadding' => 3,
          'scrollTo' => [
            'behavior' => 'smooth',
            'block' => 'center',
          ],
          'popperOptions' => [
            'modifiers' => [
              // Prevent overlap with the element being highlighted.
              [
                'name' => 'offset',
                'options' => [
                  'offset' => [-10, 20],
                ],
              ],
              // Pad the arrows so they don't hit the edge of rounded corners.
              [
                'name' => 'arrow',
                'options' => [
                  'padding' => 12,
                ],
              ],
              // Disable Shepherd's focusAfterRender modifier, which results in
              // the tour item container being focused on any scroll or resize
              // event.
              [
                'name' => 'focusAfterRender',
                'enabled' => FALSE,
              ],

            ],
          ],
        ],
        'useModalOverlay' => TRUE,
      ];

      $build['_tour_internal'] = $items;
      $build['autoStart'] = !empty($tour['auto_start']);
      $js_settings['tourContext']['tours'][$tour_id] = $build;
    }
  }
  $js_settings['tourContext']['autoStart'] = $auto_start;

  backdrop_add_js($js_settings, 'setting');
  backdrop_add_library('tour', 'shepherd');
  backdrop_add_js(backdrop_get_path('module', 'tour') . '/js/tour_context.js', array('scope' => 'footer', 'weight' => 5));
}

/**
 * Callback function for loading all tours.
 */
function tour_load_all() {
  $tours = &backdrop_static(__FUNCTION__);
  if (!isset($tours)) {
    if ($cache = cache_get('tour_tours')) {
      $tours = $cache->data;
    }
    else {
      // Find all modules providing tours.
      $all_tours = config_get_names_with_prefix('tour.tour');
      $tours = array();
      // Go through and load each config
      foreach($all_tours as $tour) {
        $config = config($tour);
        // Load the 'tours' config key
        $setting = $config->get();
        // $setting['config_name'] = $tour;
        $tours[$setting['name']] = $setting;
      }
      cache_set('tour_tours', $tours, 'cache');
    }
  }
  return $tours;
}

/**
 * Callback function for loading one tour by $name.
 */
function tour_load($name) {
  $tours = tour_load_all();
  if(isset($tours[$name])) {
    return $tours[$name];
  }
  return array();
}

/**
 * Implements hook_theme().
 */
function tour_theme($existing, $type, $theme, $path) {
  return array(
    'tour_start_link' => array(
      'variables' => array('link_title' => NULL, 'options' => array(), 'tour_name' => NULL),
      'template' => 'templates/tour-start-link',
      'file' => 'tour.theme.inc',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function tour_block_info() {
  $blocks['tour_start_link'] = array(
    'info' => t('Available tours'),
    'description' => t('Provides a list of themed start links for tour tours.')
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tour_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'tour_start_link':
      $block['subject'] = 'Available tours';
      $block['content'] = tour_block_view_build();
      break;
  }
  return $block;
}

/**
 * Return a list of links for the block.
 */
function tour_block_view_build() {
  $active_tours = tour_get_path_tours();

  $links = array();
  foreach($active_tours as $tour) {
    $links[] = theme('tour_start_link', array('tour_name' => $tour['name'], 'link_title' => $tour['title']));
  }
  if($links) {
    return theme('item_list', array('items' => $links));
  }
  return '';
}

/**
 * Utility function that returns a unique id..
 */
function tour_step_unique_id($steps, $id) {
  static $num = 1;
  $found = FALSE;
  foreach ($steps as $step) {
    if ($step['id'] == $id) {
      $id = $id . $num;
      $num++;
      $found = TRUE;
      break;
    }
  }
  return $found ? tour_step_unique_id($steps, $id) : $id;
}
