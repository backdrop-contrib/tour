<?php


/**
* Implements hook_menu().
*/
function tour_builder_menu() {
  $items['tour-builder-link'] = array(
    'title' => 'tour_builder form',
    'page callback' => 'tour_builder_link',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['tour-builder-ajax'] = array(
    'page callback' => 'tour_builder_output',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'theme callback' => 'ajax_base_page_theme',
  );
  return $items;
}


/**
 * Implements hook_library_info().
 */
function tour_builder_library_info() {
  $libraries['jquery-getpath'] = array(
    'title' => 'JQuery GetPath',
    'website' => 'https://davecardwell.co.uk/javascript/jquery/plugins/jquery-getpath/',
    'version' => '0.01',
    'js' => array(
      backdrop_get_path('module', 'tour_builder') . '/js/jquery-getpath.js' => array(),
    ),
  );
  $libraries['tour-builder'] = array(
    'title' => 'Tour builder',
    'version' => '1.0.0',
    'js' => array(
      backdrop_get_path('module', 'tour_builder') . '/js/tour_builder.js' => array(),
    ),
    'css' => array(
      backdrop_get_path('module', 'tour_builder') . '/css/tour_builder.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'dependencies' => array(
      array('tour_builder', 'jquery-getpath'),
    ),
  );
  return $libraries;
}


function tour_builder_output() {
  $options = isset($_GET['options']) ? backdrop_json_decode($_GET['options']) : array();

  // Check the token against the serialized options to prevent random access to
  // the token browser page.
  // @todo: add this back.
  if (!isset($_GET['token']) || !backdrop_valid_token($_GET['token'], 'token-tree:' . serialize($options))) {
   // return MENU_ACCESS_DENIED;
  }

  $tour_builder_output_form = backdrop_get_form('tour_builder_output_form');
  $tree = '<div>' . backdrop_render($tour_builder_output_form) . '</div>';

  // Return as a renderable so the Backdrop dialog system can use the title.
  $dialog_options = array(
    'dialogClass' => 'tour-edit-dialog',
    'modal' => FALSE,
    'draggable' => TRUE,
    'resizeable' => FALSE,
    'autoResize' => FALSE,
    'width' => '600',
    'height' => '500',
  );
  $commands = array(ajax_command_open_dialog('#tour-edit-dialog', t('Tour builder'), $tree, $dialog_options));
  $return = array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
  return $return;
}

function tour_builder_output_form($form, &$form_state) {
  backdrop_add_library('tour_builder', 'tour-builder');
  $js_settings['tourBuilding'] = TRUE;

  backdrop_add_js($js_settings, 'setting');

  $form['messages'] = array(
    '#theme' => 'status_messages',
    '#weight' => -100,
    '#prefix' => '<div id="layout-messages">',
    '#suffix' => '</div>',
  );
  if (!isset($form_state['tour_storage'])) {
    $form['tour_title'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Tour title'),
    );
    $form['tour_description'] = array(
      '#type' => 'textarea',
      '#rows' => 2,
      '#title' => t('Tour description'),
    );
    $path = $_SERVER['HTTP_REFERER'];
    global $base_url;
    $form['tour_paths'] = array(
      '#type' => 'textarea',
      '#rows' => 2,
      '#title' => t('Tour paths'),
      '#description' => t('Enter one path per line.'),
      '#default_value' => str_replace($base_url . base_path(), '', $path),
    );
    $form['actions'] = array(
      '#type' => 'actions',
    );
    $form['actions']['start'] = array(
      '#type' => 'submit',
      '#value' => t('Start tour builder'),
      '#submit' => array('tour_builder_start'),
      '#ajax' => array(
        'callback' => 'tour_builder_start_ajax',
      ),
    );
  }
  else {
    $stop_array = !empty($form_state['stops']) ? $form_state['stops'] : array();

    foreach ($stop_array as $stop) {
      $stop_list[] = $stop['title'];
    }

    $form['tour_stop'] = array(
      '#type' => 'item',
      '#id' => 'tour-stop',
    );
    $form['tour_stop']['title'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Stop label'),
    );
    $form['tour_stop']['text'] = array(
      '#type' => 'textarea',
      '#rows' => 2,
      '#required' => TRUE,
      '#title' => t('Stop text'),
    );
    $form['tour_stop']['selector'] = array(
      '#type' => 'textarea',
      '#rows' => 2,
      '#title' => t('Stop CSS identifier'),
      '#required' => TRUE,
    );
    $form['tour_stop']['tour_stop_list'] = array(
      '#type' => 'item',
      '#markup' => theme('item_list', array('items' => $stop_list)),
      '#title' => t('Stops saved:'),
    );
    $form['actions'] = array(
      '#type' => 'actions',
    );
    $form['actions']['save_stop'] = array(
      '#type' => 'submit',
      '#value' => t('Save stop'),
      '#submit' => array('tour_builder_save_stop'),
      '#ajax' => array(
        'callback' => 'tour_builder_save_stop_ajax',
      ),
    );
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Finish'),
      '#limit_validation_errors' => array(),
      '#submit' => array('tour_builder_save_finish'),
      '#ajax' => array(
        'callback' => 'tour_builder_save_finish_ajax',
      ),
    );
  }

  return $form;
}


/**
 * AJAX handler that saves a stop.
 */
function tour_builder_start($form, &$form_state) {
  module_load_include('inc', 'system', 'system.admin');
  $tour_name = system_transliterate_machine_name(strtolower($form_state['values']['tour_title']), array());

  $form_state['tour_name'] = $tour_name;
  $form_state['tour_storage'] = $tour_name;
  $form_state['tour_title'] = $form_state['values']['tour_title'];
  $form_state['tour_description'] = $form_state['values']['tour_description'];
  $form_state['tour_paths'] = $form_state['values']['tour_paths'];
  $form_state['stops'] = array();
  $form_state['rebuild'] = TRUE;
}

/**
 * AJAX handler that saves a stop.
 */
function tour_builder_start_ajax($form, &$form_state) {
  $commands[] = ajax_command_html('#tour-edit-dialog', backdrop_render($form));
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * AJAX handler that saves a stop.
 */
function tour_builder_save_stop($form, &$form_state) {
  form_state_values_clean($form_state);
  module_load_include('inc', 'system', 'system.admin');
  $machine_name = system_transliterate_machine_name(strtolower($form_state['values']['title']), array());
  $id = tour_step_unique_id($form_state['stops'], $machine_name);
  $form_state['values']['id'] = $id;
  $form_state['stops'][] = $form_state['values'];
  $form_state['rebuild'] = TRUE;
}

/**
 * AJAX handler that saves a stop.
 */
function tour_builder_save_stop_ajax($form, $form_state) {
  $form['tour_stop']['title']['#value'] = '';
  $form['tour_stop']['text']['#value'] = '';
  $form['tour_stop']['selector']['#value'] = '';
  $commands[] = ajax_command_html('#tour-stop', backdrop_render($form['tour_stop']));
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * AJAX handler that saves a stop.
 */
function tour_builder_save_finish($form, $form_state) {
  $config = config('tour.tour.' . $form_state['tour_name']);
  $config->set('name', $form_state['tour_name']);
  $config->set('title', $form_state['tour_title']);
  $config->set('paths', tour_ui_format_lines($form_state['tour_paths']));
  $config->set('description', $form_state['tour_description']);
  $config->set('editable', 1);
  $config->set('auto_start', 0);
  $config->set('enabled', 0);
  $config->set('steps', $form_state['stops']);
  $config->save();
  cache_flush('cache');
  backdrop_set_message(t('Tour "@title" saved.', array('@title' => $form_state['tour_title'])));
  if (empty($form_state['stops'])) {
    backdrop_set_message(t('No tour steps have been created as yet.'), 'warning');
  }
    
}

/**
 * AJAX handler that saves a stop.
 */
function tour_builder_save_finish_ajax($form, $form_state) {
  $commands = array();
  $commands[] = ajax_command_close_dialog('#tour-edit-dialog');
  $commands[] = ajax_command_redirect('admin/config/user-interface/tour');

  $return = array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
  return $return;
}


/**
 * Implements hook_block_info().
 */
function tour_builder_block_info() {
  $blocks['tour_builder_start_link'] = array(
    'info' => t('Tour builder'),
    'description' => t('Launch tour builder.')
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tour_builder_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'tour_builder_start_link':
      $block['subject'] = 'Tour builder';
      $block['content'] = tour_builder_link();
      break;
  }
  return $block;
}

/**
 * Implements hook_autoload_info().
 */
function tour_builder_link() {
  $form['block_list'] = array(
    '#type' => 'item',
    '#markup' => l(
      t('Start'),
      'tour-builder-ajax',
      array(
        'attributes' => array(
          'class' => array('use-ajax tour-edit-link'),
        )
      )
    ),
    '#wrapper_attributes' => array('class' => array('clicker'))
  );
  $form['#attached'] = array(
    'library' => array(
      array('system', 'backdrop.ajax'),
      array('system', 'backdrop.dialog'),
    ),
  );

  return backdrop_render($form);
}
