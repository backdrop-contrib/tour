<?php

// add enabled to defaults

/**
 * Implements hook_menu().
 *
 * @see
 */
function tour_ui_menu() {
  $items = array();

  $items['admin/config/user-interface/tour'] = array(
    'title' => 'tour',
    'page callback' => 'tour_ui_list_tour_tours',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/user-interface/tour/ui'] = array(
    'title' => 'tour UI',
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
	$items['admin/config/user-interface/tour/ui/%tour_ui_tempstore/disable'] = array(
		'title' => 'Disable tour',
		'page callback' => 'backdrop_get_form',
		'page arguments' => array('tour_ui_disable_tour', 5),
    'access arguments' => array('access administration pages'),
		'type' => MENU_CALLBACK,
	);  
  
  $items['admin/config/user-interface/tour/ui/%tour_ui_tempstore'] = array(
    'title' => 'tour Editor',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('tour_ui_edit_tour', 5),
    'access arguments' => array('access administration pages'),
  );
  $items['admin/config/user-interface/tour/ui/add'] = array(
    'title' => 'Add new tour',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('tour_ui_edit_tour', 5),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/user-interface/tour/ui/%tour_ui_tempstore/step/%'] = array(
    'title' => 'Edit step',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('tour_ui_edit_step', 5, 7),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/user-interface/tour/ui/%tour_ui_tempstore/step/%/delete'] = array(
    'title' => 'Delete step',
    'page callback' => 'tour_ui_delete_step',
    'page arguments' => array(5, 7),
    'access arguments' => array('access administration pages'),
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/user-interface/tour/ui/%tour_ui_tempstore/step/add'] = array(
    'title' => 'Edit step',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('tour_ui_edit_step', 5, 7),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_ACTION,
  );
  
  $items['admin/config/user-interface/tour/demo'] = array(
    'title' => 'tour Demo (Start tour automatically)',
    'page callback' => 'theme',
    'page arguments' => array('tour_demo'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/user-interface/tour/demo/auto-start'] = array(
    'title' => 'tour Demo (Start tour automatically)',
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/user-interface/tour/demo/manual-trigger'] = array(
    'title' => 'tour Demo (Use manual trigger to start tour)',
    'page callback' => 'theme',
    'page arguments' => array('tour_demo'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Menu callback.
 * Returns an administrative overview of all tours.
 *
 */
function tour_ui_list_tour_tours() {
  $items = tour_load_all();
  $rows = array();

  foreach ($items as $name => $item) {
    // Set variable for enabled state.
    $state = $item['enabled'] ? 'Enabled' : 'Disabled';
    
    $row['title'] = $item['title'];
    $row['description'] = $item['description'];
    $row['auto_start'] = $item['auto_start'] ? 'TRUE' : 'FALSE';
    $row['edit'] = (!$item['editable']) ? 'Not editable' : l('edit', 'admin/config/user-interface/tour/ui/' . $name);
    $row['disable'] = t("!state (!url)", array('!state' => $state, '!url' => l(t('change'), 'admin/config/user-interface/tour/ui/' . $name . '/disable')));
    $rows[] = $row;
  }
  if (!empty($rows)) {
    $header = array(
      t('Title'),
      t('Description'),
      t('Autostart'),
      t('Edit link'),
      t('Disable'),
    );
    $output = theme('table', array('header' => $header, 'rows' => $rows));
    return $output;
  }
  else {
    return t('There are no tours.');
  }
}

/**
 * Menu callback.
 * Returns the confirm form to disable a tour.
 *
 */
function tour_ui_disable_tour($form, &$form_state, $tour) {
	$form = array();
	$form['tour'] = array(
		'#type' => 'value',
		'#value' => $tour,
	);
  $set_enabled_status = $tour['enabled'] ? 'disable' : 'enable';
  return confirm_form(
    $form,
    t("Are you sure you want to !disable this tour?", array('!disable' => $set_enabled_status)),
    'admin/config/user-interface/tour',
    t(''),
    t('!disable', array('!disable' => $set_enabled_status)),
    t('Cancel')
  );
}

/**
 * Submit handler for tour_ui_disable_tour.
 * This function is invoked only when the user clicks confirm button
 * clicking on cancel, the user goes back to the $path.
 */
function tour_ui_disable_tour_submit($form, &$form_state) {
  $tour = $form['tour']['#value'];

  $set_enabled_status = $tour['enabled'] ? 0 : 1;
  $config = config($tour['config_name']);
  $config->set('enabled', $set_enabled_status);
  $config->save();

	backdrop_set_message('Tour ' . $tour['title'] . ' settings saved.');
  cache_flush('cache');
	$form_state['redirect'] = 'admin/config/user-interface/tour';
}

/**
 * Returns a form to edit a tour.
 *
 */
function tour_ui_edit_tour($form, &$form_state, $tour = 'add') {
  dpm($tour);
  backdrop_add_css(backdrop_get_path('module', 'tour_ui') . '/css/tour.admin.css');

  $form['#tree'] = TRUE;
  $form['#attributes']['id'] = 'tour-edit-table';
  $form_state['is_new'] = ($tour == 'add');
  $message = t('This form has unsaved changes. Click "Save" to make changes permanent or "Cancel" to discard changes.');

  $form['messages'] = array(
    '#markup' => !empty($tour['locked']) ? '<div class="messages warning">' . $message . '</div>' : '',
    '#weight' => -100,
    // Prefix/suffix used to identify in AJAX requests.
    '#prefix' => '<div id="layout-messages">',
    '#suffix' => '</div>',
  );
  
  if($form_state['is_new']) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Titles'),
      '#default_value' => isset($tour['title']) ? $tour['title'] : '',
    );
    $form['name'] = array(
      '#type' => 'machine_name',
      '#title' => t('Title'),
      '#default_value' => '',
      '#maxlength' => 21,
      '#machine_name' => array(
        'exists' => 'tour_name_exists',
        'source' => array('title'), 
      ),
    );
    $form['editable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Editable'),
      '#default_value' => 1,
    );
  }
  else {
    backdrop_set_title($tour['title']);

    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#default_value' => isset($tour['title']) ? $tour['title'] : '',
    );
    $form['name'] = array(
      '#type' => 'value',
      '#value' => $tour['name'],
    );
    $form['editable'] = array(
      '#type' => 'value',
      '#value' => $tour['editable'],
    );
  }
  $form_state['tour'] = $tour;
  
  // $form['name'] = array(
    // '#type' => 'value',
    // '#value' => $name,
  // );
  $form['paths'] = array(
    '#type' => 'textarea',
    '#title' => t('Paths'),
    '#rows' => 3,
    '#default_value' => isset($tour['paths']) ? implode("\n", $tour['paths']) : '',
    '#description' => t('Enter one path per line, for example "node/1" or @front for the front page.', array('@front' => '<front>')),
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#rows' => 3,
    '#default_value' => isset($tour['description']) ? $tour['description'] : '',
  );
  $form['auto_start'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto Start'),
    '#default_value' => isset($tour['auto_start']) ? $tour['auto_start'] : '',
  );
  $form['play_once'] = array(
    '#type' => 'checkbox',
    '#title' => t('Play Once'),
    '#default_value' => isset($tour['play_once']) ? $tour['play_once'] : '',
  );
  $form['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#default_value' => isset($tour['enabled']) ? $tour['enabled'] : 1,
  );
  $form['content'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('tour-content')),
    '#prefix' => '<div id="steps-fieldset-wrapper">',
    '#suffix' => '</div>',
  );
  if(!empty($tour) && !$form_state['is_new']) {
    $form['content']['add_more'] = array(
      '#prefix' => '<ul class="action-links"><li>',
      '#suffix' => '</li></ul>',
      '#type' => 'item',
      '#markup' => l(
        t('Add a step'),
        'admin/config/user-interface/tour/ui/'. $form_state['tour']['name'] . '/step/add',
        array(
          'attributes' => array(
            'class' => array('use-ajax block-item'),
            'data-dialog' => TRUE,
            'data-dialog-options' => json_encode(array('dialogClass' => 'tour-dialog')),
          )
        )
      ),
    );
  }
  $form['content']['table'] = array(
    '#type' => 'container',
    '#theme' => 'tour_ui_edit_tour_table',
    '#attributes' => array('class' => array('tour-table')),
  );
  //if (empty($form_state['content'])) {
    if(!$form_state['is_new']) {
      $form_state['content'] = $tour['steps'];
    }
  //}
  if(!empty($tour) && !$form_state['is_new']) {
    foreach ($form_state['content'] as $i => $step) {
      
      $form['content']['table'][$i]['title'] = array(
        '#markup' => $step['title'],
      );
      $form['content']['table'][$i]['weight'] = array(
        '#type' => 'weight',
        '#title' => t('Weight'),
        '#default_value' => isset($step['weight']) ? $step['weight'] : 10,
        '#delta' => 10,
        '#title_display' => 'invisible',
      );
      $form['content']['table'][$i]['operations'] = array(
        '#type' => 'dropbutton',
        '#links' => array(
          'configure' => array(
            'title' => t('Edit'),
            'href' => 'admin/config/user-interface/tour/ui/' . $tour['name'] . '/step/' . $step['id'],
            'attributes' => array(
              'class' => array('use-ajax'),
              'data-dialog' => TRUE,
              'data-dialog-options' => json_encode(array('dialogClass' => 'tour-dialog')),
            ),
          ),
          'delete' => array(
            'title' => t('Delete'),
            'href' => 'admin/config/user-interface/tour/ui/' . $tour['name'] . '/step/' . $step['id'] . '/delete',
            'attributes' => array(
              'class' => array('use-ajax'),
            ),
          ),
        ),
      );
    }
  }
  
  $form['#attached'] = array(
    'library' => array(
      array('system', 'backdrop.ajax'),
    ),
  );
  $submit_text = $form_state['is_new'] ? t('Save and add steps') : t('Save Changes');

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => $submit_text,
  );
  if(!empty($tour) && !$form_state['is_new']) {
    $form['actions']['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#validate' => array(),
      '#limit_validation_errors' => array(),
      '#submit' => array('tour_ui_edit_tour_reset'),
    );
  }
  return $form;
}

/**
 * Form validation handler for tour_ui_edit_tour().
 *
 * @see tour_ui_edit_tour_submit().
 */
function tour_ui_edit_tour_reset($form, &$form_state) {
  $tour = $form_state['tour'];
  tour_ui_clear_tempstore($tour['name']);
  backdrop_set_message(t('Tour changes discarded.'));
  $form_state['redirect'] = 'admin/config/user-interface/tour';
}

/**
 * Form validation handler for tour_ui_edit_tour().
 *
 * @see tour_ui_edit_tour_submit().
 */
function tour_ui_edit_tour_validate($form, &$form_state) {
  form_state_values_clean($form_state);
  
  unset($form_state['values']['actions']);
  
  // Cleanup multiline textareas
  $paths = tour_ui_format_lines($form_state['values']['paths']);
  
  // Validate paths
  foreach($paths as $path) {
    if(!menu_get_item($path) && $path != '<front>'){
      form_set_error('paths', t('The path @path is invalid.', array('@path' => $path)));
    }
  }
  $form_state['values']['paths'] = $paths;
/*   
  if(is_null($form_state['values']['content']) || (count($form_state['values']['content']) == 1 && $form_state['values']['content'][0]['delete'] == 1)) {
    form_set_error('form', 'No steps to save');
  }
  foreach($form_state['values']['content'] as $key => $content) {
    // Validate the optional settings textarea. Settings are input as one 
    // key:value pair per line. We need to separate each line, then convert the 
    // key:value string into array key and value.
    
    // First split the lines.
    $optionals = tour_ui_format_lines($form_state['values']['content'][$key]['optional']);
    $options = array();
    // If we got some lines, now split the pairs, using ":" as the delimiter
    if($optionals) {
      foreach($optionals as $option) {
        $split = explode(":", $option, 2);
        if(isset( $split[1])) {
          $options[$split[0]] = $split[1];
        }
        else {
          // If the split didnt return a value then the delimiter was missing,
          // or something else equally tragic. We bail out here.
          form_set_error('optional', 'One or more of your optional settings are invalid.');
        }
      }
    }
    $form_state['values']['content'][$key]['optional'] = $options;
    
    if(!$content['content'] && !$content['title']) {
      form_set_error('content', 'Steps must have a content or a title or both.');
    }

    if($content['delete']) {
      unset($form_state['values']['content'][$key]);
    }

    unset($form_state['values']['content'][$key]['delete']);
  }
 */  
}


/**
 * Form submission handler for tour_ui_edit_tour().
 *
 * @see tour_ui_edit_tour_validate().
 */
function tour_ui_edit_tour_submit($form, &$form_state) {  
  form_state_values_clean($form_state);
  $tour = $form_state['tour'];
  $index = $form_state['step_index'];

  $name = $form_state['values']['name'];
  // unset($form_state['values']['name']);
  // backdrop_sort($form_state['values']['content'], array('weight' => SORT_NUMERIC));
  // $form_state['values']['content'] = array_values($form_state['values']['content']);
  $data = $form_state['values'];
  dpm($data);
  
  $config = config('tour.tour.' . $name);
  foreach ($form_state['values'] as $key => $value) {
    $config->set($key, $value);
  }
  // This is not a new tour being added so save steps from tempstore.
  if (!$form_state['is_new']) {
    // Add weights, sort by weight, then remove weights.
    foreach ($tour['steps'] as $index => $step) {
      $tour['steps'][$index]['weight'] = $form_state['values']['content']['table'][$index]['weight'];
    }
    backdrop_sort($tour['steps'], array('weight'));
    foreach ($tour['steps'] as $index => $step) {
      unset($tour['steps'][$index]['weight']);
    }

    $config->set('steps', $tour['steps']);
  }

  $config->save();
  backdrop_static_reset('tour_load_all');
  cache_flush('cache');
  tour_ui_clear_tempstore($name);
  if ($form_state['is_new']) {
    $form_state['redirect'] = 'admin/config/user-interface/tour/ui/' . $name;
  }
  else {
    $form_state['redirect'] = 'admin/config/user-interface/tour/ui';
  }
}

/**
 * Render API callback: Checks if a field machine name is taken.
 *
 * @param $value
 *   The machine name, not prefixed with 'field_'.
 *
 * @return
 *   Whether or not the field machine name is taken.
 */
function tour_name_exists($value) {
  $tours = tour_load_all();
  return isset($tours[$value]);
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the names in it.
 */
function tour_ui_add_more_ajax($form, $form_state) {
  return $form['content'];
  $commands = array();
  $commands[] = ajax_command_html('#steps-fieldset-wrapper', backdrop_render($form['content']));
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function tour_ui_add_one($form, &$form_state) {
  $form_state['redirect'] = 'admin/config/user-interface/tour/ui/'. $form_state['tour']['name'] . '/step/add';
}

/**
 * Callback for both populating step options textareas.
 *
 * Rebuilds options in the format 'stepOption:value'.
 */
function _rebuild_step_options($optionals) {
  $lines = array();
  foreach($optionals as $key => $option) {
    $lines[] = $key . ':' . $option;
  }
  return implode("\n", $lines);
}

/**
 * Returns HTML for the tour edit form.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function theme_tour_ui_edit_tour_table($variables) {
  dpm($variables);
  $form = $variables['form'];
  // $tour = $form_state['tour'];

  $rows = array();
  $output = '';
  
  foreach (element_children($form) as $id) {

    $form[$id]['weight']['#attributes']['class'] = array('tour-ui-weight');
    $rows[] = array(
      'data' => array(
        backdrop_render($form[$id]['title']),
        backdrop_render($form[$id]['operations']),
        backdrop_render($form[$id]['weight']),
      ),
      'class' => array('draggable'),
    );
  }

  $header = array(t('Steps'), t('Configure'), t('Weight'));

  $table_id = 'tour-content';

  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id),
  ));

  $output .= backdrop_render_children($form);

  backdrop_add_tabledrag($table_id, 'order', 'sibling', 'tour-ui-weight');

  return $output;
}


/**
 * Returns HTML for the tour edit form.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function tour_ui_edit_step($form, &$form_state, $tour, $step_name = 'add') {
  $step = array();
  if ($step_name != 'add') {
    foreach ($tour['steps'] as $index => $tip) {
      if (isset($tip['id']) && $tip['id'] == $step_name) {
        $step = $tip;
        $form['id'] = array(
          '#type' => 'value',
          '#value' => $tip['id'],
        );
        $form_state['step_index'] = $index;
        break;
      }
    }
  }
  $form_state['tour'] = $tour;
  $form_state['step_name'] = $step_name;
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Tip title'),
    '#required' => TRUE,
    '#default_value' => isset($step['title']) ? $step['title'] : '',
  );
  $form['content'] = array(
    '#type' => 'textarea',
    '#title' => t('Tip content'),
    '#rows' => 2,
    '#required' => TRUE,
    '#default_value' => isset($step['content']) ? $step['content'] : '',
  );
  $form['target'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Target'),
    '#default_value' => isset($step['target']) ? $step['target'] : '',
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Changes'),
    '#ajax' => array(
      'callback' => 'tour_ui_step_ajax_dialog_submit',
    ),
  );
  $form['actions']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#limit_validation_errors' => array(),
    '#submit' => array(),
    '#ajax' => array(
      'callback' => 'tour_ui_ajax_cancel_dialog',
    ),
  );

  return $form;
}


/**
 * Form validation handler for tour_ui_edit_tour().
 *
 * @see tour_ui_edit_tour_submit().
 */
function tour_ui_edit_step_validate($form, &$form_state) {
  form_state_values_clean($form_state);
  
  unset($form_state['values']['actions']);

  if (!isset($form_state['values']['id'])) {
    module_load_include('inc', 'system', 'system.admin');
    $id = system_transliterate_machine_name($form_state['values']['title'], array());

    $form_state['values']['id'] = tour_ui_step_unique_id($form_state['tour']['steps'], $id);
  }
} 

/**
 * Form submission handler for tour_ui_edit_tour().
 *
 * @see tour_ui_edit_tour_validate().
 */
function tour_ui_edit_step_submit($form, &$form_state) {  
  $data = $form_state['tour'];
  $step = $form_state['values'];

  // $data = tour_ui_tempstore_load($tour['name']);
  //$data = $config->get();

  if (isset($form_state['step_index'])) {
    $index = (int) $form_state['step_index'];
    $data['steps'][$index] = $step;
  }
  else {
    $data['steps'][] = $step;
  }

  // $config->setData($data);
  // $config->save();
  tour_ui_set_tempstore($data);
  backdrop_static_reset('tour_load_all');
  cache_flush('cache');
  $form_state['redirect'] = 'admin/config/user-interface/tour/ui/' . $data['name'];
}


/**
 * Callback to delete a step.
 */
function tour_ui_delete_step($tour, $step) {
  foreach ($tour['steps'] as $index => $tip) {
    if (isset($tip['id']) && $tip['id'] == $step) {
      $removed_step = $tour['steps'][$index];
      unset($tour['steps'][$index]);
      break;
    }
  }

  tour_ui_set_tempstore($tour);
  $commands = array();
  if (backdrop_is_ajax()) {
    $tour_ui_edit_form = backdrop_get_form('tour_ui_edit_tour', $tour);
    $step_table_html = backdrop_render($tour_ui_edit_form['content']);
    $commands[] = ajax_command_replace('#steps-fieldset-wrapper', $step_table_html);

    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    backdrop_set_message(t('Step "@title" removed.', array('@title' => $removed_step['title'])));
    backdrop_goto('admin/config/user-interface/tour/ui/' . $tour['name']);
  }

  backdrop_static_reset('tour_load_all');
  cache_flush('cache');
  //$form_state['redirect'] = 'admin/config/user-interface/tour/ui/' . $tour['name'];
}



/**
 * Utility function that returns a unique id..
 */
function tour_ui_step_unique_id($steps, $id) {
  static $num = 1;
  $found = FALSE;
  foreach ($steps as $step) {
    if ($step['id'] == $id) {
      $id = $id . $num;
      $num++;
      $found = TRUE;
      break;
    }
  }
  return $found ? tour_ui_step_unique_id($steps, $id) : $id;
}
  

/**
 * AJAX handler that cancels the edit dialog.
 */
function tour_ui_ajax_cancel_dialog($form, $form_state) {
  $commands = array();
  $commands[] = ajax_command_close_modal_dialog();

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * AJAX handler that cancels the edit dialog.
 */
function tour_ui_step_ajax_dialog_submit($form, $form_state) {
  $commands = array();
  $commands[] = ajax_command_close_modal_dialog();
  if (form_get_errors()) {
    $html = '';
    $html .= theme('status_messages');
    $html .= backdrop_render($form);
    $title = isset($form['#title']) ? $form['#title'] : backdrop_get_title();
    $commands[] = ajax_command_open_modal_dialog($title, $html, array('dialogClass' => 'tour-dialog'));
  }
  else {
    $tour_ui_edit_form = backdrop_get_form('tour_ui_edit_tour', $form_state['tour']);
    $step_table_html = backdrop_render($tour_ui_edit_form['content']);
    $commands[] = ajax_command_replace('#steps-fieldset-wrapper', $step_table_html);
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}


/**
 * Returns HTML for a single step in the tour edit form.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function theme_tour_content_row($content) {
    // $row['title'] = backdrop_render($content['title']);
    // $row['content'] = backdrop_render($content['content']);
    // $row['target'] = backdrop_render($content['target']);
    // $row['placement'] = backdrop_render($content['placement']);
    // $rows = array($row);

    // if (!empty($rows)) {
    // $header = array();
    // $output = theme('table', array('header' => $header, 'rows' => $rows));
    
    // $attributes = backdrop_render($content['optional']);
    
    // backdrop_add_js(backdrop_get_path('module', 'tour_ui') . '/tour_ui.js');
    // $toggle = ' <a class="requirements-toggle" href="#">' . t('more') . '</a>';
    // $details = '<div class="text table-filter-text-source"> ' . $toggle . '</div>' . '<div class="requirements">' . $attributes . '</div>';

    // $output .= $details;
    // return $output;
  // }
  // else {
    //return t('There are no items in the queue.');
  //}
  return backdrop_render($content['title']);
}

function tour_ui_max_weight($content) {
  $weights = array();
  foreach($content as $step) {
    $weights[] = $step['weight'];
  }
  return max($weights);
}
function tour_ui_get_default_step($max_weight = 0) {
  return array (
    'title' => t('Stop') . '#: ' . ($max_weight + 2),
    'content' => '',
    'target' => '',
    'placement' => '',
    'optional' => '',
    'weight' => $max_weight + 1,
  );
}

/**
 * Cleans up input from multiline textareas.
 *
 */
function tour_ui_format_lines($text) {  
  // Cleanup text
  $text = explode("\n", $text);
  $text = array_map('trim', $text);
  $text = array_filter($text, 'strlen');
  return $text;
}
/**
 * Implements hook_theme().
 *
 */
function tour_ui_theme() {
  return array(
    'tour_ui_edit_tour_table' => array(
      'render element' => 'form',
    ),
    'tour_demo' => array(
      'variables' => array(),
      'template' => 'templates/tour-demo',
    ),
  );
}

 /**
 * Implements hook_config_info().
 * Provides two tour files: one with default tours for demo purposes and one 
 * which is blank, for storing user-created tours.
 */
function tour_ui_config_info() {
  $prefixes['tour.tour.auto_start'] = array(
    'label' => t('tour Default Tour - Autostart'),
    'group' => t('tour'),
  );
  $prefixes['tour.tour.manual_trigger'] = array(
    'label' => t('tour Custom Tour- Manual trigger'),
    'group' => t('tour'),
  );
  return $prefixes;
}


/**
 * Get a tour currently being edited from the tempstore.
 *
 * @param string $name
 *   The machine name of the tour to load.
 */
function tour_ui_tempstore_load($name) {
  $caches = &backdrop_static(__FUNCTION__, array());
  if (!isset($caches[$name])) {
    // Try loading from tempstore first to get in-progress changes.
    $item = tempstore_get('tour', $name);
    if (!$item) {
      $item = tour_load($name);
    }
    $caches[$name] = $item;
  }

  return $caches[$name];
}

/**
 * Store changes to a tour in the temporary store.
 *
 * @param $item
 *   The tour to save into tempstore.
 */
function tour_ui_set_tempstore($item) {
  if (empty($item['name'])) {
    return;
  }

  $item['locked'] = array(
    'uid' => $GLOBALS['user']->uid,
    'updated' => REQUEST_TIME,
  );
  tempstore_set('tour', $item['name'], $item, 604800);
}

/**
 * Remove an tour from the object cache.
 */
function tour_ui_clear_tempstore($name) {
  tempstore_clear('tour', $name);
}
